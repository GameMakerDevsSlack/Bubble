<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

alarm[0] = 10;
randomize();

bubble_nodes = 64;
bubble_ideal_radius = 250;
bubble_min_radius = 30;
bubble_max_radius = 600;
bubble_rebound = 0.07;
bubble_damping = 0.93;
bubble_tension = 0.8;
bubble_reactivity = 0.85;
arr_bubble_displacement[ bubble_nodes - 1 ] = 0;

for( var _i = 0; _i &lt; bubble_nodes; _i++ ) arr_bubble_velocity[ _i ] = random_range( -20, 20 );

mouse_vx = 0;
mouse_vy = 0;
mouse_previous_x = mouse_x;
mouse_previous_y = mouse_y;
mouse_momentum = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm 0

display_reset( 2, true );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

mouse_vx = lerp( mouse_vx, mouse_x - mouse_previous_x, mouse_momentum );
mouse_vy = lerp( mouse_vy, mouse_y - mouse_previous_y, mouse_momentum );
var _mouse_speed = sqrt( mouse_vx*mouse_vx + mouse_vy*mouse_vy );

var _velocity_next_step;
_velocity_next_step[ bubble_nodes - 1 ] = 0;

for( var _i = 0; _i &lt; bubble_nodes; _i++ ) {
    
    var _l = ( _i - 1 + bubble_nodes ) mod bubble_nodes;
    var _n = ( _i + 1 ) mod bubble_nodes;
    
    var _vel = bubble_damping * lerp( arr_bubble_velocity[ _i ], mean( arr_bubble_velocity[ _l ], arr_bubble_velocity[ _n ] ), bubble_tension );
    _vel -= bubble_rebound * arr_bubble_displacement[ _i ];
    
    arr_bubble_displacement[ _i ] += _vel;
    _velocity_next_step[ _i ] += _vel;
    
}

var _incr = 360 / bubble_nodes;
for( var _i = 0; _i &lt; bubble_nodes; _i++ ) {
    
    var _l = ( _i - 1 + bubble_nodes ) mod bubble_nodes;
    
    var _bubble_lx = x + lengthdir_x( bubble_ideal_radius + arr_bubble_displacement[ _l ], _l*_incr );
    var _bubble_ly = y + lengthdir_y( bubble_ideal_radius + arr_bubble_displacement[ _l ], _l*_incr );
    var _bubble_ix = x + lengthdir_x( bubble_ideal_radius + arr_bubble_displacement[ _i ], _i*_incr );
    var _bubble_iy = y + lengthdir_y( bubble_ideal_radius + arr_bubble_displacement[ _i ], _i*_incr );
    
    var _t = lines_intersect( mouse_previous_x, mouse_previous_y, mouse_x, mouse_y,
                              _bubble_lx, _bubble_ly, _bubble_ix, _bubble_iy, true );
    
    if ( _t &gt; 0 ) and ( _t &lt;= 1 ) {
        var _vel = _mouse_speed * bubble_reactivity * dot_product_normalised( mouse_x - mouse_previous_x, mouse_y - mouse_previous_y,
                                                                              _bubble_ix - x, _bubble_iy - y );
        _velocity_next_step[ _l ] += _vel;
        _velocity_next_step[ _i ] += _vel;
    }
    
}

for( var _i = 0; _i &lt; bubble_nodes; _i++ ) arr_bubble_velocity[ _i ] = _velocity_next_step[ _i ];

mouse_previous_x = mouse_x;
mouse_previous_y = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

draw_set_colour( c_white );
draw_text( 5, 5, "Flubber Bubble Example##@jujuadams 2017 01 17##fps=" + string( fps ) + "/" + string( floor( fps_real ) ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

draw_primitive_begin( pr_trianglefan );
draw_vertex_colour( x, y, c_ltgray, 1 );

var _incr = 360 / bubble_nodes;
for( var _i = 0; _i &lt; bubble_nodes _i++ ) {
    
    var _radius = clamp( bubble_ideal_radius + arr_bubble_displacement[ _i ], bubble_min_radius, bubble_max_radius );
    var _angle = _i*_incr;
    var _x = x + lengthdir_x( _radius, _angle );
    var _y = y + lengthdir_y( _radius, _angle );
    
    draw_vertex_colour( _x, _y, make_colour_hsv( _angle*255/360, 200, 200 ), 1 );
    
}

draw_vertex_colour( x + bubble_ideal_radius + arr_bubble_displacement[ 0 ], y, make_colour_hsv( 0, 200, 200 ), 1 );
draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
